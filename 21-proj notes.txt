


Mostly about rules of blackjack here

# start with 52 card deck
# iterate through all possible combinations of deck 
# and all possible hand combinations, dealt, dealer face up, face down 
# for each hand, try all possibilities (hit, stand, split, others?) and calculate the win % of each decision based on deck makeup
# save the results in map or something, then use the results moving forward. Start wiht one 52 card deck 

# above is purely step 1, info gathering. Step 2 would be to then run simulations of using the logic of what is saved 
# and can run many times to simulate it 
# should be fun 

# also need to learn the exact rules and scoring 
# should try multiple card counting strategies, hi-lo and my one 

# so there may be way too many possibilities to accurately do 
# good question would be how do chess engines do it?
# can definitely start with the hi-lo counting strat 
# and can test out basic strategies, seems like this sim would be perfect for that... 

# https://www.wikihow.com/Count-Cards-in-Blackjack
# maybe the first step is to just run the simulation 


# Detailed list of rules - should probably follow this 
# https://bicyclecards.com/how-to-play/blackjack/


#https://www.qfit.com/book/blackjackbook.htm 
# useful resource, some of it free online(?). May be able to find some strategies and tables in here 

# I think for a very first start, build basic strategy bot 
# then build with Hi-Lo count 
# im sure the graph with Hi-Lo count is in here https://www.youtube.com/watch?v=QLYsck5fsLU&t=111s, good ole steven bridges video 

# so how do we code this

# for loop in n times to run 
# call play function 

# play function. probably takes a number of parameters, n decks, strategy

# there should be a turn function? take a deck and deal to player 

# This looks good https://www.qfit.com/blackjack-strategy.htm

# ericwhitehead@Erics-Mac-mini clag % /usr/local/bin/python3 /Users/ericwhitehead/Desktop/clag/21-project/21-sim.py

Little bit of alpha here on what to do when the count is high. The trend I see would be to use the same basic strategy, but expect higher win pct. Can use basic strat
# https://www.techopedia.com/gambling-guides/card-counting

# This link has a list of options for how the house plays, this aligns with the opening parameters
https://wizardofodds.com/games/blackjack/hand-calculator/


OpenAI response on balanced vs unbalanced counting 
In blackjack card counting, the difference between a balanced count and an unbalanced count lies in how the values of the cards are assigned and how the count changes as the deck is dealt. Here's an explanation of both types:

Balanced Count
A balanced count is a card counting system where the sum of all the card values in a full deck equals zero. This means that if you were to count through an entire deck of 52 cards using the system, you would end up with a count of zero. The most commonly known balanced count system is the Hi-Lo system.

Hi-Lo System (Example of a Balanced Count)
2, 3, 4, 5, 6: +1
7, 8, 9: 0
10, J, Q, K, A: -1
In the Hi-Lo system, low cards (2-6) are assigned a value of +1, middle cards (7-9) are assigned a value of 0, and high cards (10, J, Q, K, A) are assigned a value of -1. Since there are an equal number of low and high cards in a deck, the count will balance out to zero.

Unbalanced Count
An unbalanced count is a card counting system where the sum of all the card values in a full deck does not equal zero. These systems often make it easier to keep track of the count because they don't require converting the count to a true count (adjusting the count based on the number of decks remaining).

KO System (Example of an Unbalanced Count)
2, 3, 4, 5, 6, 7: +1
8, 9: 0
10, J, Q, K, A: -1
In the Knock-Out (KO) system, low and middle cards (2-7) are assigned a value of +1, middle cards (8-9) are assigned a value of 0, and high cards (10, J, Q, K, A) are assigned a value of -1. Because there are more low and middle cards assigned a positive value than high cards assigned a negative value, the count does not balance out to zero. This makes it unbalanced.

Key Differences
Sum of Values:

Balanced Count: The sum of all card values equals zero in a full deck.
Unbalanced Count: The sum of all card values does not equal zero in a full deck.
Complexity:

Balanced Count: Requires conversion to a true count (adjusting for the number of decks remaining) to get an accurate measure of the advantage.
Unbalanced Count: Often does not require conversion to a true count, making it simpler to use but potentially less precise.
Examples:

Balanced Count: Hi-Lo system, Omega II.
Unbalanced Count: KO system, Red Seven system.
Practical Use
Balanced Count Systems are often preferred by serious card counters who want more precise control and are willing to handle the extra complexity of converting to a true count.
Unbalanced Count Systems are popular among casual counters and beginners because they are simpler to use and do not require keeping track of the number of decks remaining.
Both systems have their advantages and can be effective if used correctly, depending on the counter's skill level and the specific conditions of the game they are playing.

# Hmm investigate this 2024-07-29 00:21:22,891 - ROUND - Hand Complete. Result for player: PUSH player hand: [[Q♣][8♣]] dealer hand: [[4♥][A♠][J♦][5♠]]

# This too 2024-08-02 00:34:26,656 - ROUND - Hand Complete. Result for player: PUSH player hand: [[2♥][7♠]] dealer hand: [[8♥][J♠]]

# Basic strategy default charts here: https://www.blackjackapprenticeship.com/blackjack-strategy-charts/

Update project to use agreed python formatting - https://peps.python.org/pep-0008/

Looking up new strategies...
    - https://www.lasvegasadvisor.com/gambling-with-an-edge/the-easy-red-7-count/
    - https://www.youtube.com/watch?v=LeQVdnk9rfY this vid links to gamblingsites.org, which seems to used to have what we're looking for. Maybe I can use waybackmachine to find it?


-- Investigate this, dealer blackjack not workign?
2024-08-13 00:24:50,502 - CARD - player hand: [[5 H][5 S]]
2024-08-13 00:24:50,503 - CARD - Dealer up card: [Q S]
2024-08-13 00:24:50,504 - ROUND - Hand Complete. Result for player: LOSE player hand: [[5 H][5 S]] dealer hand: [[Q S][A H]]
2024-08-13 00:24:50,505 - ROUND - Hands played: 1 PNL so far: 0
2024-08-13 00:24:50,505 - RESHUFFLE - Simulation complete. Played 1, final +/- is 0



"""
Things to add:
    Fully Done: 
        - Gameplay
        - logging - mostly done, see if we can make it a global instead of class variable
        - look at @property in lieu of getter / setter ... general consensus is to favor @property over getter and setter
        - Getter / setters in funcs
        - betting ranges - simple enough bc only applies at the beginning of a hand, make it customizable
            - should be simple 1 to 1 count to unit mapping 
        - Add multiple pre-saved hand configs in the decision matrices - this can be done under the decision matrices folder, with each parent directory the name of a strategy
        - early should surrender feature? 
        - add results summary object and page at the end
        - Add summary config that gets produced at the end of the round, will include total PNL and breakdown by Win % vs True Count / count at the time -> ultimately th output
        - add layers of counts to the card matrices
        - Single quotes vs double quotes consistency across project
        Formatting items:
            - Order Imports
            - Underscores before all class variable names 
            - Number of spaces between funcs? 
            - Remove unused funcs 
            - function description / comments annotations?
            - Put main loop in if __name__ == __main__
            - Docstrings atop all classes?

    Mostly Done:
        - parameterized customizability - Everything added is done. Can add some more customizability too as I discover it 
        - counting - added basic config. need to add logic for aces count 
        - improve the lookup matrices to use the min and max rows then card value is lt or gt the min / max
        - honestly just go through this entire thing, https://peps.python.org/pep-0008/#introduction
        - case where there is a helper func in a class, that doesn't use any class variables. Where to put? in the class, or in a common file?
            -> common file

    Not at all done: 
        Formatting items:
            - Modify file structure to use accepted python project structure... /src, etc.
            - Add README explaining how to use, and the relevant variables 
            - Reorder functions within class, private functions first, then public, in logical order (order which they are used) 
            - order arguments in functions / constructors




    FINAL STEPS: 
        - Finish up Formatting items
            - Line length capped at 79 - esp for strings , can be done with comments ''' - this is a Maybe
        - Actually learn and test a few strategies - to verify results / findings 
        - setup proper project structure 
            - use proper structure
        - add documentation
        - rename 21-sim, move to /scripts directory

    ENHANCEMENTS:
        - Aces side count 
        - write results summary to a file, matplot lib visual, csv file 
        - suit based counting
        - ability to more customizably craft the deck order and the way cards are dealt to test strategies and scenarios
            - scenario testing to be exact. Like say, the count should be x, this is the deck depth, here is my strategy, how profitable is this scenario with this strategy?
            - can then run every possible outcome... 
        - bankroll sized betting. i.e. if bankroll grows or shrinks mid game, change bet size accordingly
"""

test comment

TODO: Should we capitalize the file names? not sure why theyre not already
claude is suggesting using underscores instead of camelcase for file names ... I could get behind that
    - PEP 8 supported, /advised -> done 

- Need to allow only 1 card being picked up after doubling - done
- And if you split aces, can only hit once more - done 
    - and if it goes split ace, then 10 - its not blackjack - done 
- Check if Aces become hard once it HAS to be a 1 ... (i.e. if the Ace being 11 would make it > 21, then it's no longer soft) - done 
- Add a should surrender csv - done
- Make surrender being allowed configurable - done 


# Latest bug
2024-12-02 20:10:21,367 - CARD - Player [[A♥][A♣]]
2024-12-02 20:10:21,368 - CARD - Dealer up card: [3♣]
2024-12-02 20:10:21,368 - CARD - Player hit decision is True with Player [[A♥][2♣]] and dealer up card [3♣]
2024-12-02 20:10:21,368 - CARD - Player hit decision is True with Player [[A♣][4♠]] and dealer up card [3♣]
2024-12-02 20:10:21,368 - CARD - Hand Complete. Result for player: WIN with Player [[A♥][2♣][9♣]] and Dealer [[3♣][K♠][J♣]]
2024-12-02 20:10:21,368 - CARD - Hand Complete. Result for player: WIN with Player [[A♣][4♠][K♣]] and Dealer [[3♣][K♠][J♣]]
2024-12-02 20:10:21,368 - CARD - Hands played: 2 PNL so far: 1
2024-12-02 20:10:21,368 - SUMMARY - END OF GAME ANALYSIS 

# This logic needs to be looked at - HAND STATISTICS BY PAIR TOTAL vs DEALER UP CARD

# 3 bugs detected  
- Splitting example above, total pnl is messed up 
- splitting aces should only allow one more hit -> and check double down  
- the hand statistics by pair counts don't make sense 

Also, I should consider adding an add_to_front (or end technically) method to the shoe class, which can be used in testing
-> and then potentially revert everything done with shoe.deal_card() as a parameter 

# Another bug here - where does the 3rd hand come from...?
Hands played: 9 PNL so far: 3.5
2024-12-03 23:06:01,708 - CARD - Player [[A S][A D]]
2024-12-03 23:06:01,709 - CARD - Dealer up card: [4 H]
2024-12-03 23:06:01,711 - CARD - Doubling down for with Player [[A S][7 C]] and dealer up card [4 H]
2024-12-03 23:06:01,712 - CARD - Doubling down for with Player [[A D][6 H]] and dealer up card [4 H]
2024-12-03 23:06:01,713 - CARD - Player hit decision is False with Player [[A S][7 C]] and dealer up card [4 H]
2024-12-03 23:06:01,714 - CARD - Player hit decision is True with Player [[A D][6 H]] and dealer up card [4 H]
2024-12-03 23:06:01,714 - CARD - Hand Complete. Result for player: WIN with Player [[A S][7 C]] and Dealer [[4 H][10 H][J H]]
2024-12-03 23:06:01,715 - CARD - Hand Complete. Result for player: WIN with Player [[A D][6 H][9 H]] and Dealer [[4 H][10 H][J H]]
2024-12-03 23:06:01,716 - CARD - Hand Complete. Result for player: WIN with Player [[A C][10 H]] and Dealer [[4 H][10 H][J H]]
2024-12-03 23:06:01,717 - CARD - Hands played: 12 PNL so far: 8.5
-> Note the 10H appears twice... which would e extremely rare given that this was with 2 deck (maybe I should do one deck for testing?)
-> Tried replicating in testing_file and it's not working 


Open bugs - 
- print formatting for: Total hands played: 9. Bankroll: 4.5 -> between shuffles -> Done
- the above logs
    - still really want to figure out what happened there ... maybe the previous hands don't get cleared? or something ... didn't appear when I retried 
- ending summary skewed hand amounts -> done 
- when I remove the surrender ability, pnl starts to go negative. perhaps my surrender logic is too forgiving / early

wizard of odds calculator has it at let's say. .321% edge for dealer 
.321 / 2 = .16

so 50.16 vs 49.84 
so after 100000 hands, it would be 
100000 * (2) * (.5016) for dealer
(100000 * (2) * (.4984)) - 100000 for player = -320 

formula for expected profit is (num hands - (num hands * (1 + house edge as %)) 
    - profit would be num hands - (num hands * (1 + house edge %)) = expected profit 
    solving for house edge 
    ((expected profit + num hands) / num hands) - 1 = house edge %

500k hands would be below,
500000  - (500000 * (1 + .00321)) = -1605 and we're getting more like -500 

using https://www.blackjackapprenticeship.com/blackjack-calculator/, once we go up to 4 decks, it seems to get really accurate

Goes from negative without surrender to +9k ... which implies 54% house edge. So something's definitely off
I think I should make SURRENDER part of the hand result enum -> it's already there
Whatever I just did ... seems to have worked 
    -> test fully, and move the calculate_win_amount() func to utilities


# Open bugs 
- the above logs with the split aces becoming three
    - still really want to figure out what happened there ... maybe the previous hands don't get cleared? or something ... didn't appear when I retried
- make the end of game printing be dependent on spacing for the longest num # value in the set 
# Print ROI 
# Should I do something to save run results in another results log file? 
    - something like "ran x hands, total pnl y, player edge / house edge is %, then these are the stats: 
    - not a bad idea

-> found this bug again! only seems to happens when aces is the split card - added some print statements to help
2024-12-05 23:25:38,553 - SUMMARY - Hand Complete. Result for player: WIN with Player [[A C][9 D]] and Dealer [[2 S][6 C][10 H]]
2024-12-05 23:25:38,554 - SUMMARY - Hand Complete. Result for player: PUSH with Player [[A S][7 C]] and Dealer [[2 S][6 C][10 H]]
2024-12-05 23:25:38,555 - SUMMARY - Hand Complete. Result for player: LOSE with Player [[A C][5 C]] and Dealer [[2 S][6 C][10 H]]

2024-12-05 23:25:36,958 - SUMMARY - Hand Complete. Result for player: WIN with Player [[A D][4 C]] and Dealer [[6 S][8 H][10 S]]
2024-12-05 23:25:36,960 - SUMMARY - Hand Complete. Result for player: WIN with Player [[A H][10 D]] and Dealer [[6 S][8 H][10 S]]
2024-12-05 23:25:36,962 - SUMMARY - Hand Complete. Result for player: WIN with Player [[A C][6 D]] and Dealer [[6 S][8 H][10 S]]

-- the latest
2024-12-06 18:09:48,208 - SUMMARY - Splitting hand Player [[A♦][A♥]]
2024-12-06 18:09:48,208 - SUMMARY - Doubling down with Player [[A♥][6♦]] and dealer up card [3♥]
2024-12-06 18:09:48,208 - SUMMARY - Doubling down with Player [[A♦][6♣]] and dealer up card [3♥]
2024-12-06 18:09:48,208 - SUMMARY - Player hit decision is True with Player [[A♥][6♦]] and dealer up card [3♥]
2024-12-06 18:09:48,208 - SUMMARY - Player hit decision is True with Player [[A♦][6♣]] and dealer up card [3♥]
2024-12-06 18:09:48,209 - SUMMARY - Hand Complete. Result for player: LOSE with Player [[A♥][6♦][3♠]] and Dealer [[3♥][8♣][J♦]]
2024-12-06 18:09:48,209 - SUMMARY - Hand Complete. Result for player: LOSE with Player [[A♦][6♣][5♥]] and Dealer [[3♥][8♣][J♦]]
2024-12-06 18:09:48,209 - SUMMARY - Hand Complete. Result for player: PUSH with Player [[A♥][K♣]] and Dealer [[3♥][8♣][J♦]]


# Open bugs 
- the above logs with the split aces becoming three
    - still really want to figure out what happened there ... maybe the previous hands don't get cleared? or something ... didn't appear when I retried
    - This looks to be no problem... when I add my printing logic, everything looks good. 
    - There was a bug with hitting a card after splitting aces, then doubling down, but now fixed.
- make the end of game printing be dependent on spacing for the longest num # value in the set -> actually already done 
# Print ROI -> done 
# Should I do something to save run results in another results log file? 
    - something like "ran x hands, total pnl y, player edge / house edge is %, then these are the stats: 
    - not a bad idea
# NEW HYPER EDGE CASE: When player doubles down after splitting aces, then getting dealt a card, despite not being able to hit again ... actually think I fixed this 
- add duration -> done 

# TODO
Add a Player edge % return instead of PNL in the logs? -> in progress 
    -> When calculating player edge, I think I need to exclude the bet unit size in the calculation. But should still somehow present the total return 
    -> I think I should replace the PNL section from Pair vs dealer to use edge % instead of raw PNL ... either way, knowing bet unit size, pnl and edge can be used to calculate others
        -> This i'm not sure is completely accurate - should probably just get rid of Edge w/Unit sizing ... its more confusing
Mark the count before playing the hand- and see how if it changes  
    -> yes it has flipped, and now looks correct. Should now add ROI to the end print screen 


UPDATE README AGAIN
- and fully test for other counting strategies 
    -> done 
- buy this blackbelt in Blackjack book and try to add a few strategies (zen system), and run the basic test
    - then merge and squash on git 

- This book blackbelt in blackjack suggests surrender should happen before splitting
    - what if you surrender before and after splitting...? -> yes should surrender before splitting, need to update
- Another note - we just pre_hand count for betting unit but then use current count to determine action ... which I think is ok

- True count should actually be div by # decks remaining to be dealt - total decks, regardless of cut card point
    -> fix this -> done 

- and this is called hi-lo lite -> done 

- consider using pre hand count for all decisions instead of mid hand
    - should try it and see what works with better with the counts 

# Try again with hi-lo-lite-2 and basic-strategy-2 to exactly match the blackbelt blackjack charts in appendix 
    - with hi-lo-lite-1, they got worse after I modified the decision

# Note filling these charts in as if double after split is allowed 
# try hi-lo deviations from BJA ... yes, another chart 
    - https://www.blackjackapprenticeship.com/wp-content/uploads/2019/07/BJA_S17.pdf

hi-lo-lite, using current count (as opposed to pre hand) and the wrong adjust to range func is giving like -1.85% returns 
    - about -1.5% to -2% after fixing adjust_to_range 
    - pre hand not any better
    - hi lo lite 2 somehow even worse 
        - but much more consistent

actually, my adjust to range is wrong. It should use the next lowest idx if possible so -1 maps to -2 instead of 0 -> fixed 

Leaving it at pre-hand. It performs slightly better



